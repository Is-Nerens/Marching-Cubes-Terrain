#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// Uniforms
uniform float densityThreshold;
uniform int offsetX;
uniform int offsetY;
uniform int offsetZ;
uniform int densityCount;

layout(binding = 0) writeonly buffer VertexBuffer {
    float vertices[];
};
layout(binding = 1) readonly buffer TriTableBuffer {
    int TriTable[];
};
layout(binding = 2) readonly buffer EditDensities {
    int editDensities[];
};
layout(binding = 3) buffer DensityCache {
    float densityCache[];
};

// cornerIndexAFromEdge array
const int cornerIndexAFromEdge[12] = int[](0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3);

// cornerIndexBFromEdge array
const int cornerIndexBFromEdge[12] = int[](1, 2, 3, 0, 5, 6, 7, 4, 4, 5, 6, 7);


struct Corner {
    vec3 position;
    float density;
};

vec3 VertexInterp(Corner c1, Corner c2)
{
    float t = (densityThreshold- c1.density) / (c2.density - c1.density);
    vec3 v;
    v.x = c1.position.x + t * (c2.position.x - c1.position.x);
    v.y = c1.position.y + t * (c2.position.y - c1.position.y);
    v.z = c1.position.z + t * (c2.position.z - c1.position.z);
    return v;
}

vec3 CalculateNormal(vec3 v1, vec3 v2, vec3 v3)
{
    vec3 vect1 = v2 - v1;
    vec3 vect2 = v3 - v1;
    
    // Handle degenerate case, return a default normal or NaN
    if (length(vect1) < 0.00001 || length(vect2) < 0.00001) {
        return vec3(0.0, 0.0, 0.0); // Or return NaN or some default normal
    }
    
    vec3 unnormalized = cross(vect1, vect2);
    return normalize(unnormalized);
}

int GetDensityIndex(int x, int y, int z)
{
    return x + (y * (int(gl_NumWorkGroups.x) + 1)) + (z * (int(gl_NumWorkGroups.x) + 1) * (int(gl_NumWorkGroups.y) + 1));
}












// PERLIN NOISE ON THE GPU
vec3 RandomGradient3D(int ix, int iy, int iz) 
{
    const uint w = 32u;
    const uint s = w / 2;
    
    uint a = uint(ix), b = uint(iy), c = uint(iz);
    a *= 3284157443U;
    b ^= a << s | a >> (w - s);
    b *= 1911520717U;
    a ^= b << s | b >> (w - s);
    a *= 2048419325U;
    float randomX = float(a) * (3.14159265 / float(0xFFFFFFFFU)); // in [0, 2*Pi]

    // Generate a random angle for the z-axis
    c *= 3329032859U;
    c ^= a << s | a >> (w - s);
    c *= 1431691223U;
    b ^= c << s | c >> (w - s);
    b *= 1812433253U;
    float randomZ = float(b) * (3.14159265 / float(0xFFFFFFFFU)); // in [0, 2*Pi]

    // Create the vector from the angles
    vec3 v;
    v.x = sin(randomX) * cos(randomZ);
    v.y = cos(randomX) * cos(randomZ);
    v.z = sin(randomZ);
    return v;
}

vec2 RandomGradient2D(int ix, int iy)
{
    const uint w = 32u;
    const uint s = w / 2;
    
    uint a = uint(ix), b = uint(iy);
    a *= 3284157443U;
    b ^= a << s | a >> (w - s);
    b *= 1911520717U;
    a ^= b << s | b >> (w - s);
    a *= 2048419325U;
    float random = float(a) * (3.14159265 / float(0xFFFFFFFFU)); // in [0, 2*Pi]

    // Create the vector from the angles
    vec2 v;
    v.x = sin(random);
    v.y = cos(random);
    return v;
}

float DotGridGradient3D(int ix, int iy, int iz, float x, float y, float z)
{
    vec3 gradient = RandomGradient3D(ix, iy, iz);
    float dx = x - float(ix);
    float dy = y - float(iy);
    float dz = z - float(iz);
    return dot(gradient, vec3(dx, dy, dz));
}

float DotGridGradient2D(int ix, int iy, float x, float y)
{
    vec2 gradient = RandomGradient2D(ix, iy);
    float dx = x - float(ix);
    float dy = y - float(iy);
    return dot(gradient, vec2(dx, dy));
}

float Interpolate(float a0, float a1, float w)
{
    return (a1 - a0) * (3.0f - w * 2.0f) * w * w + a0;
}

float Perlin3D(float x, float y, float z)
{
    // Grid cell corner coordinates
    int x0 = int(floor(x));
    int y0 = int(floor(y));
    int z0 = int(floor(z));
    int x1 = x0 + 1;
    int y1 = y0 + 1;
    int z1 = z0 + 1;

    // Interpolation weights
    float sx = x - float(x0);
    float sy = y - float(y0);
    float sz = z - float(z0);

    // Bottom corners
    float n0 = DotGridGradient3D(x0, y0, z0, x, y, z);
    float n1 = DotGridGradient3D(x1, y0, z0, x, y, z);
    float n2 = DotGridGradient3D(x0, y1, z0, x, y, z);
    float n3 = DotGridGradient3D(x1, y1, z0, x, y, z);

    // Top corners
    float n4 = DotGridGradient3D(x0, y0, z1, x, y, z);
    float n5 = DotGridGradient3D(x1, y0, z1, x, y, z);
    float n6 = DotGridGradient3D(x0, y1, z1, x, y, z);
    float n7 = DotGridGradient3D(x1, y1, z1, x, y, z);

    // Trilinear interpolation
    float ix0 = Interpolate(n0, n1, sx);
    float ix1 = Interpolate(n2, n3, sx);
    float ix2 = Interpolate(n4, n5, sx);
    float ix3 = Interpolate(n6, n7, sx);

    float iy0 = Interpolate(ix0, ix1, sy);
    float iy1 = Interpolate(ix2, ix3, sy);

    float interpolatedValue = Interpolate(iy0, iy1, sz);
    return (interpolatedValue + 1.0) / 2.0;
}

float Perlin2D(float x, float y)
{
    // Grid corner coordinates
    int x0 = int(floor(x));
    int y0 = int(floor(y));
    int x1 = x0 + 1;
    int y1 = y0 + 1;

    // Interpolation weights
    float sx = x - float(x0);
    float sy = y - float(y0);

    // Corners
    float n0 = DotGridGradient2D(x0, y0, x, y);
    float n1 = DotGridGradient2D(x1, y0, x, y);
    float n2 = DotGridGradient2D(x0, y1, x, y);
    float n3 = DotGridGradient2D(x1, y1, x, y);

    // Interpolation
    float ix0 = Interpolate(n0, n1, sx);
    float ix1 = Interpolate(n2, n3, sx);

    float interpolatedValue = Interpolate(ix0, ix1, sy);
    return interpolatedValue;
}










float GetSurfaceHeight(float x, float z)
{
    return (Perlin2D((x + offsetX) * 0.005, (z + offsetZ) * 0.005) * 40) + 
    (Perlin2D((x + offsetX) * 0.01, (z + offsetZ) * 0.01) * 20) + 
    (Perlin2D((x + offsetX) * 0.02, (z + offsetZ) * 0.02) * 10) + 
    (Perlin2D((x + offsetX) * 0.04, (z + offsetZ) * 0.04) * 5) + 
    (Perlin2D((x + offsetX) * 0.08, (z + offsetZ) * 0.08) * 2.5);
}

float GetCaveDensity(float x, float y, float z)
{
    float sx = (x + offsetX) * 0.05;
    float sy = (y + offsetY) * 0.05;
    float sz = (z + offsetZ) * 0.05;
    return Perlin3D(sx, sy, sz) 
    + Perlin3D(sx * 2, sy * 2, sz * 2) * 0.5 
    + Perlin3D(sx * 4, sy * 4, sz * 4) * 0.25
    + Perlin3D(sx * 8, sy * 8, sz * 8) * 0.15;
}

float GetDensity(float x, float y, float z)
{
    // CHECK THE DENSITY CACHE TO SEE IF DENSITY HAS ALREADY BEEN CALCULATED
    int densityIndex = GetDensityIndex(int(x), int(y), int(z));
    if (densityCache[densityIndex] != -1) {
        return densityCache[densityIndex];
    }

    float pointHeight = y + offsetY;

    // Calculate the density based on the height difference for the surface
    float surfaceHeight = GetSurfaceHeight(x, z) * 1.5;
    float surfaceDensity = surfaceHeight - pointHeight;
    surfaceDensity = clamp(surfaceDensity, 0.0, 1.0);

    float caveDensity = GetCaveDensity(x, y, z) * 0.85; 

    // BLEND BETWEEN CAVE DENSITY AND SURFACE 
    float blendDistance = 6;
    float density = 0;
    if (pointHeight < surfaceHeight + blendDistance)
    {
        float blendTerm = clamp((surfaceHeight + blendDistance - pointHeight) / blendDistance, 0, 1);
        density = mix(surfaceDensity, caveDensity, blendTerm);
    }
    else
    {
        density = surfaceDensity;
    }

    // APPLY EDIT DENSITY AND RETURN
    float editDensity = 0.0;
    if (densityCount > 0) 
    {
        editDensity = editDensities[densityIndex];
    }

    float result = density + editDensity;
    densityCache[densityIndex] = result;
    return result;
}

















int TriTableGet(int cubeIndex, int i)
{
    int index = cubeIndex * 16 + i;
    return TriTable[index];
}

void AddFace(vec3 v1, vec3 v2, vec3 v3, vec3 normal, int index)
{
    // vertex 1
    vertices[index] = v1.x;
    vertices[index + 1] = v1.y;
    vertices[index + 2] = v1.z;

    // vertex 2
    vertices[index + 3] = v2.x;
    vertices[index + 4] = v2.y;
    vertices[index + 5] = v2.z;

    // vertex 3
    vertices[index + 6] = v3.x;
    vertices[index + 7] = v3.y;
    vertices[index + 8] = v3.z;

    // normal
    vertices[index + 9] = normal.x;
    vertices[index + 10] = normal.y;
    vertices[index + 11] = normal.z;
}

void main()
{
    int threadID = int(gl_GlobalInvocationID.x) +
               int(gl_GlobalInvocationID.y) * int(gl_NumWorkGroups.x) * int(gl_WorkGroupSize.x) +
               int(gl_GlobalInvocationID.z) * int(gl_NumWorkGroups.x) * int(gl_NumWorkGroups.y) * int(gl_WorkGroupSize.x) * int(gl_WorkGroupSize.y);


    // create 8 corners
    Corner corners[8];
    corners[0].position = vec3(gl_GlobalInvocationID.x    , gl_GlobalInvocationID.y    , gl_GlobalInvocationID.z + 1);
    corners[1].position = vec3(gl_GlobalInvocationID.x + 1, gl_GlobalInvocationID.y    , gl_GlobalInvocationID.z + 1);
    corners[2].position = vec3(gl_GlobalInvocationID.x + 1, gl_GlobalInvocationID.y    , gl_GlobalInvocationID.z    );
    corners[3].position = vec3(gl_GlobalInvocationID.x    , gl_GlobalInvocationID.y    , gl_GlobalInvocationID.z    );
    corners[4].position = vec3(gl_GlobalInvocationID.x    , gl_GlobalInvocationID.y + 1, gl_GlobalInvocationID.z + 1);
    corners[5].position = vec3(gl_GlobalInvocationID.x + 1, gl_GlobalInvocationID.y + 1, gl_GlobalInvocationID.z + 1);
    corners[6].position = vec3(gl_GlobalInvocationID.x + 1, gl_GlobalInvocationID.y + 1, gl_GlobalInvocationID.z    );
    corners[7].position = vec3(gl_GlobalInvocationID.x    , gl_GlobalInvocationID.y + 1, gl_GlobalInvocationID.z    );

    // calculate the cube index
    int cubeIndex = 0;
    for (int i = 0; i < 8; ++i) {
        corners[i].density = GetDensity(corners[i].position.x, corners[i].position.y, corners[i].position.z);
        if (corners[i].density > densityThreshold) cubeIndex |= (1 << i);
    }

    // Default v1 x to -1 (CPU Optimisation)
    vertices[threadID * 48] = -1.0f;
    vertices[threadID * 48 + 12] = -1.0f;
    vertices[threadID * 48 + 24] = -1.0f;
    vertices[threadID * 48 + 36] = -1.0f;

    // Fill cubeVertices and cubeNormals arrays
    int i = 0;
    while(TriTableGet(cubeIndex, i) != -1)
    {    
        int a0 = cornerIndexAFromEdge[TriTableGet(cubeIndex, i)];
        int b0 = cornerIndexBFromEdge[TriTableGet(cubeIndex, i)];
        int a1 = cornerIndexAFromEdge[TriTableGet(cubeIndex, i+1)];
        int b1 = cornerIndexBFromEdge[TriTableGet(cubeIndex, i+1)];
        int a2 = cornerIndexAFromEdge[TriTableGet(cubeIndex, i+2)];
        int b2 = cornerIndexBFromEdge[TriTableGet(cubeIndex, i+2)];
        
        vec3 v1 = VertexInterp(corners[a0], corners[b0]);
        vec3 v2 = VertexInterp(corners[a1], corners[b1]);
        vec3 v3 = VertexInterp(corners[a2], corners[b2]);
        vec3 normal = CalculateNormal(v1, v2, v3);

        AddFace(v1, v2, v3, normal, threadID * 48 + i * 4);
        i += 3;
    }
}








